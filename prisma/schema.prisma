generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  key   String @id
  value String
}

model User {
  id         String  @id
  avatar     String?
  externalId String? @unique
  email      String? @unique
  contact    String? @unique
  password   String
  name       String

  status        UserStatus @default(INACTIVE)
  role          UserRole   @default(CUSTOMER)
  repaymentRate Int        @default(100)

  loans          Loan[]
  repayments     Repayment[]
  commodityLoans CommodityLoan[]

  paymentMethod UserPaymentMethod?
  identity      UserIdentity?
  payroll       UserPayroll?
  loan          ActiveLoan?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  liquidationRequests LiquidationRequest[]
  notifications       Notification[]
}

model UserPayroll {
  userId String @id // IPPIS ID (Staff ID) -> External ID on User table

  netPay        Decimal @default(0) @db.Decimal(10, 2) // Employee's remaining salary after deductions
  employeeGross Decimal @default(0) @db.Decimal(10, 2) // Employee actual pay
  grade         String?
  step          Int?
  command       String

  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [externalId], onDelete: Cascade)
}

model UserIdentity {
  userId        String        @id
  dateOfBirth   String
  gender        Gender
  maritalStatus MaritalStatus

  residencyAddress  String
  stateResidency    String
  landmarkOrBusStop String

  nextOfKinName         String
  nextOfKinContact      String
  nextOfKinAddress      String
  nextOfKinRelationship Relationship

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPaymentMethod {
  userId        String   @id
  bankName      String
  accountNumber String   @unique
  accountName   String
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActiveLoan {
  id String @id

  amountRepayable Decimal @db.Decimal(10, 2)
  amountRepaid    Decimal @default(0) @db.Decimal(10, 2)
  penaltyAmount   Decimal @default(0) @db.Decimal(10, 2)

  disbursementDate DateTime
  tenure           Int

  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Loan {
  id String @id

  amountBorrowed  Decimal @db.Decimal(10, 2)
  amountRepayable Decimal @default(0) @db.Decimal(10, 2)
  amountRepaid    Decimal @default(0) @db.Decimal(10, 2)

  managementFeeRate Decimal @db.Decimal(5, 4)
  interestRate      Decimal @db.Decimal(5, 4)

  status   LoanStatus   @default(PENDING)
  category LoanCategory
  tenure   Int          @default(0)

  disbursementDate DateTime?

  borrower   User     @relation(fields: [borrowerId], references: [id])
  borrowerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  asset        CommodityLoan?
  repayments   Repayment[]
  activeLoanId String?
}

model Repayment {
  id     String  @id
  amount Decimal @db.Decimal(10, 2)

  expectedAmount Decimal @default(0) @db.Decimal(10, 2)
  repaidAmount   Decimal @default(0) @db.Decimal(10, 2)
  penaltyCharge  Decimal @default(0) @db.Decimal(10, 2)

  period     String // e.g., "APRIL 2025"
  periodInDT DateTime
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  status     RepaymentStatus @default(AWAITING)

  failureNote    String?
  resolutionNote String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  loan                 Loan?               @relation(fields: [loanId], references: [id])
  loanId               String?
  liquidationRequest   LiquidationRequest? @relation(fields: [liquidationRequestId], references: [id])
  liquidationRequestId String?

  @@index([userId, loanId, period])
}

model CommodityLoan {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  inReview  Boolean  @default(true)

  publicDetails  String?
  privateDetails String?
  loan           Loan?   @relation(fields: [loanId], references: [id])
  loanId         String? @unique
  userId         String
  user           User    @relation(fields: [userId], references: [id])
}

model Notification {
  id              String  @id
  title           String
  description     String
  callToActionUrl String?

  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

model LiquidationRequest {
  id         String @id
  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  totalAmount Decimal           @db.Decimal(10, 2)
  status      LiquidationStatus @default(PENDING)

  createdAt  DateTime  @default(now())
  approvedAt DateTime?
  adminId    String

  repayments Repayment[]
}

enum LiquidationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  ADMIN
  CUSTOMER
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  FLAGGED
}

enum LoanCategory {
  EDUCATION
  PERSONAL
  BUSINESS
  MEDICAL
  RENT
  TRAVEL
  AGRICULTURE
  UTILITIES
  EMERGENCY
  OTHERS
  ASSET_PURCHASE
}

enum LoanStatus {
  PENDING
  REJECTED
  APPROVED
  DISBURSED
  REPAID
}

enum RepaymentStatus {
  AWAITING // No need, maybe
  PARTIAL
  FULFILLED
  FAILED // No need
  MANUAL_RESOLUTION
}

enum Gender {
  Female
  Male
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
}

enum Relationship {
  Spouse
  Parent
  Child
  Sibling
  Other
}
