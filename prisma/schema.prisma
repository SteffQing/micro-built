generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String          @id @unique
  name      String
  email     String          @unique
  contact   String          @unique
  password  String
  status    UserStatus      @default(INACTIVE)
  loans     Loan[]
  createdAt DateTime        @default(now())
  role      UserRole        @default(CUSTOMER)
  inventory InventoryItem[]
  settings  Settings?
  identity  UserIdentity?
}

model UserIdentity {
  id               String   @id @default(cuid())
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  documents        String[]
  residencyAddress String
  stateResidency   String
  nextOfKinName    String
  nextOfKinContact String
  createdAt        DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model Settings {
  userId                    String  @id
  creditScore               Int     @default(0)
  emailNotificationsEnabled Boolean @default(true)

  user User @relation(fields: [userId], references: [id])
}

model Loan {
  id String @id

  amount       Decimal @db.Decimal(10, 2)
  interestRate Decimal @db.Decimal(5, 4)
  lateFeeRate  Decimal @db.Decimal(5, 4)
  revenue      Decimal @default(0) @db.Decimal(10, 2)

  status   LoanStatus   @default(PENDING)
  loanType LoanType     @default(CASH)
  category LoanCategory

  disbursementDate DateTime?
  dueDate          DateTime

  borrower   User        @relation(fields: [borrowerId], references: [id])
  borrowerId String
  repayments Repayment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  asset   InventoryItem? @relation(fields: [assetId], references: [id])
  assetId String?
}

model Repayment {
  id        String          @id @default(cuid())
  amount    Decimal         @db.Decimal(10, 2)
  method    RepaymentMethod
  status    RepaymentStatus @default(PENDING)
  paidAt    DateTime?
  reference String?
  loan      Loan            @relation(fields: [loanId], references: [id])
  loanId    String
  createdAt DateTime        @default(now())
}

model InventoryItem {
  id          String   @id @default(cuid())
  name        String // e.g., "Samsung TV 32'"
  description String?
  category    String // Electronics, Appliances, etc.
  inStock     Int      @default(0)
  threshold   Int      @default(10) // Low-stock alert level
  vendor      User     @relation(fields: [vendorId], references: [id])
  vendorId    String
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  loans       Loan[]
}

enum UserRole {
  ADMIN
  CUSTOMER
  VENDOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  FLAGGED
}

enum LoanType {
  CASH
  ASSET
}

enum LoanCategory {
  EDUCATION
  PERSONAL
  BUSINESS
  MEDICAL
  RENT
  TRAVEL
  AGRICULTURE
  UTILITIES // Electricity, internet, etc.
  EMERGENCY
  ASSET_PURCHASE // Phones, laptops, furniture (linked to inventory maybe)
  OTHERS
}

enum LoanStatus {
  PENDING
  APPROVED
  DISBURSED
  REJECTED
  REPAID
  DEFAULTED
}

enum RepaymentMethod {
  CARD
  TRANSFER
  USSD
  WALLET
}

enum RepaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
