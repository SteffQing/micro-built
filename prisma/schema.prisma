generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  key   String @id
  value String
}

model User {
  id         String  @id
  avatar     String?
  externalId String? @unique
  email      String  @unique
  password   String
  name       String

  status        UserStatus @default(INACTIVE)
  role          UserRole   @default(CUSTOMER)
  repaymentRate Int        @default(100)

  loans          Loan[]
  repayments     Repayment[]
  commodityLoans CommodityLoan[]
  paymentMethod  UserPaymentMethod?
  identity       UserIdentity?
  payroll        UserPayroll?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPayroll {
  userId String @id // IPPIS ID -> External ID on User table

  employer    String
  netPay      Decimal @db.Decimal(10, 2) // Employee's remaining salary after deductions
  grade       String
  forceNumber String
  step        Int
  command     String

  user User @relation(fields: [userId], references: [externalId])
}

model UserIdentity {
  userId        String        @id
  dateOfBirth   String
  documents     String[] // passport, statement etc.
  gender        Gender
  maritalStatus MaritalStatus
  firstName     String
  lastName      String
  contact       String        @unique

  residencyAddress  String
  stateResidency    String
  landmarkOrBusStop String

  nextOfKinName         String
  nextOfKinContact      String
  nextOfKinAddress      String
  nextOfKinRelationship Relationship

  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model UserPaymentMethod {
  userId        String   @id
  bankName      String
  accountNumber String
  accountName   String
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Loan {
  id String @id

  amount            Decimal @db.Decimal(10, 2)
  amountRepayable   Decimal @default(0) @db.Decimal(10, 2)
  amountRepaid      Decimal @default(0) @db.Decimal(10, 2)
  managementFeeRate Decimal @db.Decimal(5, 4)
  interestRate      Decimal @db.Decimal(5, 4)

  status   LoanStatus   @default(PENDING)
  category LoanCategory

  disbursementDate DateTime?
  loanTenure       Int       @default(0)
  extension        Int       @default(0)

  borrower   User        @relation(fields: [borrowerId], references: [id])
  borrowerId String
  repayments Repayment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  asset CommodityLoan?
}

model Repayment {
  id             String  @id
  amount         Decimal @db.Decimal(10, 2)
  expectedAmount Decimal @db.Decimal(10, 2)
  repaidAmount   Decimal @db.Decimal(10, 2)

  period     String // e.g., "APRIL 2025"
  periodInDT DateTime
  createdAt  DateTime        @default(now())
  status     RepaymentStatus @default(AWAITING)

  user   User   @relation(fields: [userId], references: [externalId])
  userId String

  loan   Loan   @relation(fields: [loanId], references: [id])
  loanId String
}

model CommodityLoan {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  inReview  Boolean  @default(true)

  publicDetails  String?
  privateDetails String?
  loan           Loan?   @relation(fields: [loanId], references: [id])
  loanId         String? @unique
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  CUSTOMER
  SUPER_ADMIN
  VIEW_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  FLAGGED
}

enum LoanCategory {
  EDUCATION
  PERSONAL
  BUSINESS
  MEDICAL
  RENT
  TRAVEL
  AGRICULTURE
  UTILITIES
  EMERGENCY
  OTHERS
  ASSET_PURCHASE
}

enum LoanStatus {
  PENDING
  PREVIEW
  REJECTED
  ACCEPTED
  APPROVED
  DISBURSED
  REPAID
}

enum RepaymentStatus {
  AWAITING
  PARTIAL
  FULFILLED
  OVERPAID
  FAILED
}

enum Gender {
  Female
  Male
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
}

enum Relationship {
  Spouse
  Parent
  Child
  Sibling
  Other
}
